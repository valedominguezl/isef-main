name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build

      - name: Upload build to VPS
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Guardar la clave privada temporalmente
          echo "$PRIVATE_KEY" > key.pem
          chmod 600 key.pem

          # Crear directorio de builds si no existe
          ssh -i key.pem -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            mkdir -p /var/www/builds
          EOF

          # Definir nombre del directorio (timestamp) para el build actual
          BUILD_DIR=$(date +%Y%m%d%H%M%S)

          # Subir el build al VPS
          rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" ./dist/ $VPS_USER@$VPS_HOST:/var/www/builds/$BUILD_DIR/

          # En el VPS, eliminar el enlace simbÃ³lico o el contenido de /var/www/html,
          # recrear /var/www/html y copiar el contenido del nuevo build
          ssh -i key.pem -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            # Elimina /var/www/html (ya sea un enlace simbÃ³lico o directorio)
            rm -rf /var/www/html
            # Crea nuevamente el directorio /var/www/html
            mkdir -p /var/www/html
            # Copia el contenido del nuevo build en /var/www/html
            cp -r /var/www/builds/$BUILD_DIR/* /var/www/html/
            echo "ðŸš€ Deploy completado. Nueva versiÃ³n activa en /var/www/html"
          EOF

          # Borrar la clave privada por seguridad
          rm -f key.pem
